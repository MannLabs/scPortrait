[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "scportrait"
version = "1.2.0"
description = "Computational framework to generate single cell datasets from raw microscopy images."
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
keywords = ["single-cell", "image analysis", "spatial omics", "deep learning", "image representation"]
dynamic = ["dependencies", "optional-dependencies"]
authors = [
  {name = "Sophia Maedler"},
  {name = "Niklas Schmacke"},
  {name = "Altana Namsaraeva"},
  {name = "Georg Wallmann"},
]
maintainers = [
  {name = "Sophia Maedler", email = "maedler@biochem.mpg.de"},
]

classifiers = [
 "License :: OSI Approved :: Apache Software License",
 "Development Status :: 4 - Beta",
 "Programming Language :: Python",
 "Intended Audience :: Science/Research",
 "Natural Language :: English",
 "Operating System :: MacOS :: MacOS X",
 "Operating System :: POSIX :: Linux",
 "Topic :: Scientific/Engineering :: Bio-Informatics",
]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[tool.setuptools.dynamic.optional-dependencies]
dev = {file = ["requirements_dev.txt"]}

[project.urls]
Homepage = "https://github.com/MannLabs/scPortrait"
Documentation = "https://mannlabs.github.io/scPortrait/html/index.html"
Source = "https://github.com/MannLabs/scPortrait"

[tool.ruff]
src = ["src"]
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    #"D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
    "TCH",  # Typing imports
    "NPY",  # Numpy specific rules
    #"PTH"  # Use pathlib
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
    # Imports unused
    "F401",
    # camcelcase imported as lowercase
    "N813",
    # module import not at top level of file
    "E402",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.mypy]
strict = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
no_strict_optional = true
