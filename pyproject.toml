[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "sparcspy"
version = "0.0.1"
description = "SPARCSpy is a scalable toolkit to analyse SPARCS datasets."
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "Sophia Maedler"},
]
maintainers = [
    {name = "Sophia Maedler", email = "maedler@biochem.mpg.de"},
]
urls.Documentation = "https://sparcspy.readthedocs.io/"
urls.Source = "https://github.com/MannLabs/SPARCSspatial"
urls.Home-page = "https://github.com/MannLabs/SPARCSspatial"
dependencies = [
    "anndata",
    "numpy",
    "pandas",
    "tabulate",
    "colorama",
    "matplotlib",
    "tqdm",
    "h5py",
    "pyyaml",
    "pillow",
    "zarr",
    "ome-zarr",
    "alphabase",
    "aicspylibczi",
    "shapely",
    "rasterio",
    "imagesize",
    "xarray",
    "numba",
    "pytorch-lightning",
    "torchvision",
    "opencv-python",
    "scikit-image",
    "scipy",
    "mahotas",
    # for debug logging (referenced from the issue template)
    "session-info",
]


[project.optional-dependencies]
dev = [
    "pre-commit",
    "twine>=4.0.2",
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4",
    "sphinx-book-theme>=1.0.0",
    "myst-nb>=1.1.0",
    "sphinxcontrib-bibtex>=1.0.0",
    "setuptools",  # Until pybtex >0.23.0 releases: https://bitbucket.org/pybtex-devs/pybtex/issues/169/
    "sphinx-autodoc-typehints",
    "sphinxext-opengraph",
    # For notebooks
    "ipykernel",
    "ipython",
    "sphinx-copybutton",
    "pandas",
]
test = [
    "pytest",
    "coverage",
]

[tool.hatch.envs.default.scripts]
post-install = """
import os
import sys
import platform

if platform.system() == "Linux":
    target_folder = "/usr/local/bin"
    commands = ["sparcs-stat", "sparcs-split", "sparcs-merge"]
    src_directory = os.path.join(
        os.path.dirname(os.path.realpath(__file__)), "src", "sparcscmd"
    )
    bin_directory = os.path.dirname(os.path.abspath(sys.executable))

    for cmd in commands:
        src_module = os.path.join(src_directory, cmd + ".py")
        symlink_origin = os.path.join(bin_directory, cmd)

        # make script executable
        st = os.stat(src_module)
        os.chmod(src_module, st.st_mode | 0o111)

        if not os.path.islink(symlink_origin):
            print(f"symlink for {cmd} does not exist, will be created")
            os.symlink(src_module, symlink_origin)
else:
    print(
        "Automatic symlinks are only supported on linux. Please add sparcs cli commands to your PATH."
    )
"""

[tool.coverage.run]
source = ["sparcspy"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]

[tool.ruff]
line-length = 120
src = ["src"]
extend-include = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; formatter gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
    # TODO discuss with Sophia
    "D103",
    "D102",
    "D106",
    "BLE001"
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.cruft]
skip = [
    "tests",
    "src/**/__init__.py",
    "src/**/basic.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
    "docs/notebooks/example.ipynb",
]
